{
  "qc": {
    "config": {
      "database": {
        "implementation": "CCDB",
        "host": "ccdb-test.cern.ch:8080",
        "username": "not_applicable",
        "password": "not_applicable",
        "name": "not_applicable"
      },
      "Activity": {
      },
      "monitoring": {
        "url": "infologger:///debug?qc"
      },
      "consul": {
        "url": ""
      },
      "conditionDB": {
        "url": "ccdb-test.cern.ch:8080"
      }
    },    
    "aggregators": {
      "TPCTestAggregator1": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::TPCAggregator",
        "moduleName": "QcTPC",
        "policy": "OnAny",
        "detectorName": "TPC",
        "dataSource": [{
          "type": "Check",
          "name": "CheckOfTrack_Trending",
            "QOs" : ["Tracks_Trending/hEta_StatMean_Trend", "Tracks_Trending/hNClustersAfterCuts_StatMean_Trend" ]
        }]
      }, 
      "TPCTestAggregator2": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::TPCAggregator",
        "moduleName": "QcTPC",
        "policy": "OnAny",
        "detectorName": "TPC",
        "dataSource": [{
          "type": "Aggregator",
          "name": "TPCTestAggregator1",
            "QOs" : ["TPCTestAggregator1" ]
        },
        {
          "type": "Check",
          "name": "CheckOfTrack_Trending",
            "QOs" : ["Tracks_Trending/hNClustersBeforeCuts_StatMean_Trend" ]
        }]
      }
    },
    "checks" : {
      "CheckOfPID_Trending" : {
        "active" : "false",
        "className" : "o2::quality_control_modules::tpc::CheckOfTrendings",
        "moduleName" : "QcTPC",
        "policy" : "OnEachSeparately",
        "detectorName" : "TPC",
        "dataSource" : [ {
          "type" : "PostProcessing",
          "name" : "PID_Trending",
          "MOs" : [ "hNClusters_StatMean_Trend", "hdEdxTot_StatMean_Trend", "hdEdxMax_StatMean_Trend", "hTgl_StatMean_Trend", "hSnp_StatMean_Trend", "hdEdxEles_StatMean_Trend", "hdEdxEles_StatStddev_Trend", "hdEdxMips_StatMean_Trend", "hdEdxMips_StatStddev_Trend", "hdEdxElesMips_Separ_Trend", "hdEdxElesMips_SeparPower_Trend", "hdEdxVsncls_StatMean_Trend_dEdx", "hdEdxVsp_StatMean_Trend_p", "hdEdxVsPhiMipsAside_StatMean_Trend_dEdx", "hdEdxVsPhiMipsCside_StatMean_Trend_dEdx", "hdEdxVsPhiElesAside_StatMean_Trend_dEdx", "hdEdxVsPhiElesCside_StatMean_Trend_dEdx" ]
        } ],

        "stopTrigger_comment": [ "Parameters are needed to choose if check should be performed only as last point comparison to average or average comparison to expected value." ],
        "checkParameters": {
          "CheckChoice" : "Mean",
          "SliceTrending" : "false",
          "expectedPhysicsValue" : "65",
          "allowedNSigmaForExpectation" : "3",
          "badNSigmaForExpectation" : "6",
          "allowedNSigmaForMean" : "3",
          "badNSigmaForMean" : "6",
          "pointsToTakeForExpectedValueCheck" : "10",
          "pointsToTakeForMeanCheck" : "10",
          "allowedRange" : "0.2",
          "badRange" : "2",
          "pointsToTakeForRangeCheck" : "10",
          "MetadataComment" : "TestComment2",
          "pointsToTakeForZeroCheck" : "8"
        }
        },
        "CheckOfTrack_Trending" : {
        "active" : "true",
        "className" : "o2::quality_control_modules::tpc::CheckOfTrendings",
        "moduleName" : "QcTPC",
        "policy" : "OnEachSeparately",
        "detectorName" : "TPC",
        "dataSource" : [ {
          "type" : "PostProcessing",
          "name" : "Tracks_Trending",
          "MOs" : [ "hEta_StatMean_Trend", "hNClustersAfterCuts_StatMean_Trend", "hNClustersBeforeCuts_StatMean_Trend" ]
        } ],

        "stopTrigger_comment": [ "Parameters are needed to choose if check should be performed only as last point comparison to average or average comparison to expected value." ],
        "checkParameters": {
          "CheckChoice" : "Range",
          "SliceTrending" : "false",
          "expectedPhysicsValue" : "0.1",
          "EPV_comment" : "This value is used for the Expected Physics Value and the Range Check",
          "allowedNSigmaForExpectation" : "3",
          "badNSigmaForExpectation" : "6",
          "allowedNSigmaForMean" : "1",
          "badNSigmaForMean" : "2",
          "pointsToTakeForExpectedValueCheck" : "10",
          "pointsToTakeForMeanCheck" : "10",
          "allowedRange" : "0.05",
          "badRange" : "0.1",
          "pointsToTakeForRangeCheck" : "1",
          "MetadataComment" : "TestComment",
          "pointsToTakeForZeroCheck" : "4"
          
        }
      },
      "CheckOfTrack_Trending_Slice" : {
        "active" : "true",
        "className" : "o2::quality_control_modules::tpc::CheckOfTrendings",
        "moduleName" : "QcTPC",
        "policy" : "OnEachSeparately",
        "detectorName" : "TPC",
        "dataSource" : [ {
          "type" : "PostProcessing",
          "name" : "Tracks_Trending_Slice",
          "MOs" : [ "hEta_StatMean_Trend" ]
        } ],

        "stopTrigger_comment": [ "Parameters are needed to choose if check should be performed only as last point comparison to average or average comparison to expected value." ],
        "checkParameters": {
          "CheckChoice" : "Zero, Mean",
          "SliceTrending" : "true",
          "expectedPhysicsValue" : "0.1",
          "EPV_comment" : "This value is used for the Expected Physics Value and the Range Check",
          "allowedNSigmaForExpectation" : "3",
          "badNSigmaForExpectation" : "6",
          "allowedNSigmaForMean" : "1",
          "badNSigmaForMean" : "2",
          "pointsToTakeForExpectedValueCheck" : "10",
          "pointsToTakeForMeanCheck" : "10",
          "allowedRange" : "0.05",
          "badRange" : "0.1",
          "pointsToTakeForRangeCheck" : "1",
          "MetadataComment" : "TestComment",
          "pointsToTakeForZeroCheck" : "4"
          
        }
      }
     },
    "postprocessing": {
      "TestQualityCheckerTrending": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::QualityObserver",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "qualityObserverName": "TestQualityCheckerTrending",
        "observeDetails": "true", 
        "qualityDetailChoice": "Null, Good, Medium, Bad, Comment",
        "qualityObserverConfig": [
          {
            "groupTitle": "Tracks Trending",
            "path": "TPC/QO/",
            "inputObjects": [ "CheckOfTrack_Trending/Tracks_Trending/hEta_StatMean_Trend", "CheckOfTrack_Trending_Slice/Tracks_Trending_Slice/hEta_StatMean_Trend" ],
            "inputObjectTitles": [ "Eta, Mean Trend, Framework Trend",  "Eta, Mean Trend, Slice Trend" ]
          }
        ],
        "initTrigger": [
          "userorcontrol"
        ],
        "updateTrigger": [
          "10 seconds"
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "TestTPCAggregatorObserver": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::QualityObserver",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "qualityObserverName": "TestQualityCheckerTrending",
        "observeDetails": "true", 
        "qualityDetailChoice": "Null, Good, Medium, Bad",
        "lineLength": "70",
        "qualityObserverConfig": [
          {
            "groupTitle": "Tracks Trending",
            "path": "TPC/QO/",
            "inputObjects": [ "CheckOfTrack_Trending/Tracks_Trending/hEta_StatMean_Trend", "CheckOfTrack_Trending/Tracks_Trending/hNClustersAfterCuts_StatMean_Trend", "CheckOfTrack_Trending/Tracks_Trending/hNClustersBeforeCuts_StatMean_Trend", "TPCTestAggregator1/TPCTestAggregator1", "TPCTestAggregator2/TPCTestAggregator2" ],
            "inputObjectTitles": [ "Eta",  "NClusters after", "NClusters before", "Aggregated 1", "Aggregated 2" ]
          }
        ],
        "initTrigger": [
          "userorcontrol"
        ],
        "updateTrigger": [
          "10 seconds"
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "PID_Trending": {
        "active": "false",
        "className": "o2::quality_control::postprocessing::TrendingTask",
        "moduleName": "QualityControl",
        "detectorName": "TPC",
        "dataSources": [
          {
            "type": "repository",
            "path": "TPC/MO/PID",
            "names": [ "hNClusters", "hdEdxTot", "hdEdxMax", "hTgl", "hSnp", "hdEdxEles",  "hdEdxMips" ],
            "reductorName": "o2::quality_control_modules::common::TH1Reductor",
            "moduleName": "QcCommon"
          },
          {
            "type": "repository",
            "path": "TPC/MO/PID",
            "names": [  "hdEdxVsncls", "hdEdxVsp", "hdEdxVsPhiMipsAside", "hdEdxVsPhiMipsCside", "hdEdxVsPhiElesAside", "hdEdxVsPhiElesCside" ],
            "reductorName": "o2::quality_control_modules::common::TH2Reductor",
            "moduleName": "QcCommon"
          }
        ],
        "plots": [
          {
            "name": "hNClusters_StatMean_Trend",
            "title": "Mean trend of the number of TPC clusters",
            "varexp": "hNClusters.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hNClusters.stddev/(sqrt(hNClusters.entries)))"
          },
          {
            "name": "hdEdxTot_StatMean_Trend",
            "title": "Mean trend of dEdxTot",
            "varexp": "hdEdxTot.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hdEdxTot.stddev/(sqrt(hdEdxTot.entries)))"
          },
          {
            "name": "hdEdxMax_StatMean_Trend",
            "title": "Mean trend of dEdxMax",
            "varexp": "hdEdxMax.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hdEdxMax.stddev/(sqrt(hdEdxMax.entries)))"
          },
          {
            "name": "hTgl_StatMean_Trend",
            "title": "Mean trend of tan(#lambda)",
            "varexp": "hTgl.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hTgl.stddev/(sqrt(hTgl.entries)))"
          },
          {
            "name": "hSnp_StatMean_Trend",
            "title": "Mean trend of sin(p)",
            "varexp": "hSnp.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hSnp.stddev/(sqrt(hSnp.entries)))"
          },
          {
            "name": "hdEdxEles_StatMean_Trend",
            "title": "Mean trend of dEdx for electrons",
            "varexp": "hdEdxEles.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hdEdxEles.stddev/(sqrt(hdEdxEles.entries)))"
          },
          {
            "name": "hdEdxEles_StatStddev_Trend",
            "title": "Stddev trend of dEdx for electrons",
            "varexp": "hdEdxEles.stddev:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxMips_StatMean_Trend",
            "title": "Mean trend of dEdx for MIPS",
            "varexp": "hdEdxMips.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hdEdxMips.stddev/(sqrt(hdEdxMips.entries)))"
          },
          {
            "name": "hdEdxMips_StatStddev_Trend",
            "title": "Stddev trend of dEdx for MIPS",
            "varexp": "hdEdxMips.stddev:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxElesMips_Separ_Trend",
            "title": "Separation trend of dEdx between electrons and MIPS",
            "varexp": "(hdEdxEles.mean-hdEdxMips.mean):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxElesMips_SeparPower_Trend",
            "title": "Separation power trend of dEdx between electrons and MIPS",
            "varexp": "((hdEdxEles.mean-hdEdxMips.mean)/(0.5*(hdEdxEles.stddev+hdEdxMips.stddev))):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxVsncls_StatMean_Trend_dEdx",
            "title": "Trend mean dEdx from dEdx vs Number of Clusters",
            "varexp": "(hdEdxVsncls.sumwy/hdEdxVsncls.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxVsp_StatMean_Trend_p",
            "title": "Trend mean p from dEdx vs Momentum",
            "varexp": "(hdEdxVsp.sumwx/hdEdxVsp.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxVsPhiMipsAside_StatMean_Trend_dEdx",
            "title": "Trend mean dEdx from hdEdxVsPhiMipsAside",
            "varexp": "(hdEdxVsPhiMipsAside.sumwy/hdEdxVsPhiMipsAside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxVsPhiMipsCside_StatMean_Trend_dEdx",
            "title": "Trend mean dEdx from hdEdxVsPhiMipsCside",
            "varexp": "(hdEdxVsPhiMipsCside.sumwy/hdEdxVsPhiMipsCside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxVsPhiElesAside_StatMean_Trend_dEdx",
            "title": "Trend mean dEdx from hdEdxVsPhiElesAside",
            "varexp": "(hdEdxVsPhiElesAside.sumwy/hdEdxVsPhiElesAside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxVsPhiElesCside_StatMean_Trend_dEdx",
            "title": "Trend mean dEdx from hdEdxVsPhiElesCside",
            "varexp": "(hdEdxVsPhiElesCside.sumwy/hdEdxVsPhiElesCside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          }
        ],
        "initTrigger": [
          "userorcontrol"
        ],
        "updateTrigger": [
          "30 seconds"
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },     
      "Tracks_Trending": {
        "active": "true",
        "className": "o2::quality_control::postprocessing::TrendingTask",
        "moduleName": "QualityControl",
        "detectorName": "TPC",
        "dataSources": [
          {
            "type": "repository",
            "path": "TPC/MO/Tracks",
            "names": [ "hNClustersBeforeCuts", "hNClustersAfterCuts", "hEta", "hPt", "hSign", "hPtPos", "hPtNeg" ],
            "reductorName": "o2::quality_control_modules::common::TH1Reductor",
            "moduleName": "QcCommon"
          },
          {
            "type": "repository",
            "path": "TPC/MO/Tracks",
            "names": [ "h2DNClustersPhiAside", "h2DNClustersPhiCside" ],
            "reductorName": "o2::quality_control_modules::common::TH2Reductor",
            "moduleName": "QcCommon"
          }
        ],
        "plots": [
          {
            "name": "hNClustersBeforeCuts_StatMean_Trend",
            "title": "Mean trend of the number of TPC clusters (Before the cuts)",
            "varexp": "hNClustersBeforeCuts.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hNClustersBeforeCuts.stddev)/(sqrt(hNClustersBeforeCuts.entries))"
          },
          {
            "name": "hNClustersAfterCuts_StatMean_Trend",
            "title": "Mean trend of the number of TPC clusters (After the cuts)",
            "varexp": "hNClustersAfterCuts.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hNClustersAfterCuts.stddev)/(sqrt(hNClustersAfterCuts.entries))"
          },
          {
            "name": "hEta_StatMean_Trend",
            "title": "Mean trend of the pseudorapidity",
            "varexp": "hEta.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hEta.stddev)/(sqrt(hEta.entries))"
          },
          {
            "name": "hPt_StatMean_Trend",
            "title": "Mean trend of the transverse momentum",
            "varexp": "hPt.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hPt.stddev)/(sqrt(hPt.entries))"
          },
          {
            "name": "hSign_StatMean_Trend",
            "title": "Mean trend of the sign of electric charge",
            "varexp": "hSign.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hSign.stddev)/(sqrt(hSign.entries))"
          },
          {
            "name": "hPtNeg_StatMean_Trend",
            "title": "Mean trend of the transverse momentum of negative charges",
            "varexp": "hPtNeg.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hPtNeg.stddev)/(sqrt(hPtNeg.entries))"
          },
          {
            "name": "hPtPos_StatMean_Trend",
            "title": "Mean trend of the transverse momentum of positive charges",
            "varexp": "hPtPos.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hPtPos.stddev)/(sqrt(hPtPos.entries))"
          },
          {
            "name": "h2DNClustersPhiAside_StatMean_Trend_Phi",
            "title": "Mean trend of Phi from h2DNClustersPhiAside",
            "varexp": "(h2DNClustersPhiAside.sumwx/h2DNClustersPhiAside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "h2DNClustersPhiAside_StatMean_Trend_Nclusters",
            "title": "Mean trend of the number of clusters from h2DNClustersPhiAside",
            "varexp": "(h2DNClustersPhiAside.sumwy/h2DNClustersPhiAside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "h2DNClustersPhiCside_StatMean_Trend_Phi",
            "title": "Mean trend of Phi from h2DNClustersPhiCside",
            "varexp": "(h2DNClustersPhiCside.sumwx/h2DNClustersPhiCside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "h2DNClustersPhiCside_StatMean_Trend_Nclusters",
            "title": "Mean trend of the number of clusters from h2DNClustersPhiCside",
            "varexp": "(h2DNClustersPhiCside.sumwy/h2DNClustersPhiCside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          }
        ],
        "initTrigger": [
          "userorcontrol"
        ],
        "updateTrigger": [
          "10 seconds"
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      }, 
      "Tracks_Trending_Slice": {
        "active": "true",
        "className": "o2::quality_control::postprocessing::SliceTrendingTask",
        "moduleName": "QualityControl",
        "detectorName": "TPC",
        "producePlotsOnUpdate": "true",
        "resumeTrend": "false",
        "dataSources": [
          {
            "type": "repository",
            "path": "TPC/MO/Tracks",
            "names": [  "hEta" ],
            "reductorName": "o2::quality_control_modules::common::TH1SliceReductor",
            "axisDivision": [ [ "-1.0", "-0.5", "0.0", "0.5", "1.0" ] ],
            "moduleName": "QcCommon"
          }
        ],
        "plots": [
          {
            "name": "hEta_StatMean_Trend",
            "title": "Mean trend of the pseudorapidity",
            "varexp": "hEta.meanX:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "errMeanX:0.",
            "graphYRange": "-1.0:1.0",
            "graphXRange": "",
            "graphAxisLabel": "Mean Eta X:time"
          }
        ],
        "initTrigger": [
          "userorcontrol"
        ],
        "updateTrigger": [
          "10 seconds"
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      }
    }
  }
}