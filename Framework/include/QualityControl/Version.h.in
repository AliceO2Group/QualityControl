// Copyright CERN and copyright holders of ALICE O2. This software is
// distributed under the terms of the GNU General Public License v3 (GPL
// Version 3), copied verbatim in the file "COPYING".
//
// See http://alice-o2.web.cern.ch/license for full licensing information.
//
// In applying this license CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

///
/// \file    Version.h
/// \author  Barthelemy von Haller
///

#ifndef QC_CORE_VERSION_H
#define QC_CORE_VERSION_H

#include <string>
#include <sstream>

namespace o2::quality_control::core {

/// Represents a software package version.
/// Inspired from https://sourcey.com/articles/comparing-version-strings-in-cpp
class Version
{
  public:

    /// Create a version from a string.
    /// @param version The version in the form X.Y.Z. If minor or patch is missing, it is replaced by 0.
    Version(std::string version)
    {
      std::sscanf(version.c_str(), "%d.%d.%d", &mMajor, &mMinor, &mPatch);
    }

    Version(int major, int minor, int patch): mMajor(major), mMinor(minor), mPatch(patch)
    {
    }

    ~Version() = default;

    /// \brief Returns the version of the QC framework.
    /// Returns the version of the QC framework as found in CMake.
    static Version& GetQcVersion()
    {
      // Guaranteed to be destroyed. Instantiated on first use
      static Version qcVersion{@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@};
      return qcVersion;
    }

    int getMajor() const
    {
      return mMajor;
    }

    int getMinor() const
    {
      return mMinor;
    }

    int getPatch() const
    {
      return mPatch;
    }

    bool operator<(const Version &other)
    {
      if (getMajor() < other.getMajor()) {
        return true;
      }
      if (getMinor() < other.getMinor()) {
        return true;
      }
      if (getPatch() < other.getPatch()) {
        return true;
      }
      return false;
    }

    bool operator==(const Version &other)
    {
      return getMajor() == other.getMajor()
             && getMinor() == other.getMinor()
             && getPatch() == other.getPatch();
    }

    friend std::ostream &operator<<(std::ostream &stream, const Version &ver)
    {
      stream << ver.getMajor() << '.' << ver.getMinor() << '.' << ver.getPatch();
      return stream;
    }

    std::string getString()
    {
      std::ostringstream version;
      version << this;
      return version.str();
    }

  private:
    int mMajor = 0, mMinor = 0, mPatch = 0;
};

} // namespace o2::quality_control::core

#endif // QC_CORE_VERSION_H
