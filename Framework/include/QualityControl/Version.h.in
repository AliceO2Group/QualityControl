// Copyright CERN and copyright holders of ALICE O2. This software is
// distributed under the terms of the GNU General Public License v3 (GPL
// Version 3), copied verbatim in the file "COPYING".
//
// See http://alice-o2.web.cern.ch/license for full licensing information.
//
// In applying this license CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

///
/// \file    Version.h
/// \author  Barthelemy von Haller
///

#ifndef QC_CORE_VERSION_H
#define QC_CORE_VERSION_H

#include <string>
#include <sstream>
#include <iostream>

using namespace std;

namespace o2::quality_control::core {

/// Represents a software package version.
/// Version numbers can go up to 999.
class Version
{
  public:

    /// Create a version from a string.
    /// @param version The version in the form X.Y.Z. If minor or patch is missing, it is replaced by 0.
    Version(std::string version)
    {
      std::sscanf(version.c_str(), "%u.%u.%u", &mMajor, &mMinor, &mPatch);
    }

    Version(unsigned int major, unsigned int minor, unsigned int patch): mMajor(major), mMinor(minor), mPatch(patch)
    {
    }

    ~Version() = default;

    /// \brief Returns the version of the QC framework.
    /// Returns the version of the QC framework as found in CMake.
    static Version& GetQcVersion()
    {
      // Guaranteed to be destroyed. Instantiated on first use
      static Version qcVersion{@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@};
      return qcVersion;
    }

    unsigned int getMajor() const
    {
      return mMajor;
    }

    unsigned int getMinor() const
    {
      return mMinor;
    }

    unsigned int getPatch() const
    {
      return mPatch;
    }

    bool operator<(const Version &other)
    {
      return getIntegerRepresentation() < other.getIntegerRepresentation();
    }

    bool operator>=(const Version &other)
    {
      return getIntegerRepresentation() >= other.getIntegerRepresentation();
    }

    bool operator>(const Version &other)
    {
      return getIntegerRepresentation() > other.getIntegerRepresentation();
    }

    bool operator<=(const Version &other)
    {
      return getIntegerRepresentation() <= other.getIntegerRepresentation();
    }

    bool operator==(const Version &other)
    {
      return getIntegerRepresentation() == other.getIntegerRepresentation();
    }

    bool operator!=(const Version &other)
    {
      return getIntegerRepresentation() != other.getIntegerRepresentation();
    }

    friend std::ostream &operator<<(std::ostream &stream, const Version &ver)
    {
      stream << ver.getString();
      return stream;
    }

    std::string getString() const
    {
      std::stringstream result;
      result << getMajor() << '.' << getMinor() << '.' << getPatch();
      return result.str();
    }

    unsigned int getIntegerRepresentation() const
    {
      return getMajor() * (getMaxVersion() * getMaxVersion()) + getMinor() * getMaxVersion() + getPatch() * 1;
    }

    unsigned int getMaxVersion() const {
      return mMaxVersion;
    }

  private:
    unsigned int mMajor = 0, mMinor = 0, mPatch = 0;
    unsigned int mMaxVersion = 1000;

};

} // namespace o2::quality_control::core

#endif // QC_CORE_VERSION_H
