/*
 * Notes
 * - having 1 file per object per version server-side might lead to a tremendous number of files.
 *    --> they are aware of it
 * - how to add a new filter ? such as expert/shifter flag
 * - we really need a C++ interface hiding the curl complexity.
 * - what are those time intervals ? what does it mean for us ?
 *    --> epoch milliseconds as long values
 * - how to know the real time at which the object was stored ?
 *    --> new api should allow for it. To be confirmed.
 * - we rather have a task_name/X/Y/Z/object_name/.../time where X/Y/Z are actually part of object_name but happen to have slashes, to build a hierarchy of objects
 *    --> we can.
 * - we need to have a way to query for all objects in a certain path, e.g. in "task_name/X/Y" or in "task_name"
 *    --> the new api should allow it. To be tested.
 * - when retrieving an object, despite what the usage menu says, the time can't be omitted.
 *    --> doc has been udpated.
 * - initial tests show that it seems pretty slow.
 *    --> ok on their server with the new metadata database (postgresql)
 * - We need getListOfTasksWithPublications() and getPublishedObjectNames()
 * - Current path to objects : .../task/object with object possibly a slash separated subpath (up to 6 levels). Also consider having a task name such as
 *   "TPC/Task1" such as to build a tree of tasks with subsystems prefix.
 *
 */